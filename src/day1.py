code = '21752342814933766938172121674976879111362417653261522357855816893656462449168377359285244818489723869987861247912289729579296691684761143544956991583942215236568961875851755854977946147178746464675227699149925227227137557479769948569788884399379821111382536722699575759474473273939756348992714667963596189765734743169489599125771443348193383566159843593541134749392569865481578359825844394454173219857919349341442148282229689541561169341622222354651397342928678496478671339383923769856425795211323673389723181967933933832711545885653952861879231537976292517866354812943192728263269524735698423336673735158993853556148833861327959262254756647827739145283577793481526768156921138428318939361859721778556264519643435871835744859243167227889562738712953651128317624673985213525897522378259178625416722152155728615936587369515254936828668564857283226439881266871945998796488472249182538883354186573925183152663862683995449671663285775397453876262722567452435914777363522817594741946638986571793655889466419895996924122915777224499481496837343194149123735355268151941712871245863553836953349887831949788869852929147849489265325843934669999391846286319268686789372513976522282587526866148166337215961493536262851512218794139272361292811529888161198799297966893366553115353639298256788819385272471187213579185523521341651117947676785341146235441411441813242514813227821843819424619974979886871646621918865274574538951761567855845681272364646138584716333599843835167373525248547542442942583122624534494442516259616973235858469131159773167334953658673271599748942956981954699444528689628848694446818825465485122869742839711471129862632128635779658365756362863627135983617613332849756371986376967117549251566281992964573929655589313871976556784849231916513831538254812347116253949818633527185174221565279775766742262687713114114344843534958833372634182176866315441583887177759222598853735114191874277711434653854816841589229914164681364497429324463193669337827467661773833517841763711156376147664749175267212562321567728575765844893232718971471289841171642868948852136818661741238178676857381583155547755219837116125995361896562498721571413742'

def part1(code):
    # The captcha requires you to review a sequence of digits (your puzzle input) and
    # find the sum of all digits that match the next digit in the list. The list is circular,
    # so the digit after the last digit is the first digit in the list.
    #
    # For example:
    #
    # 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit
    #       and the third digit (2) matches the fourth digit.
    # 1111 produces 4 because each digit (all 1) matches the next.
    # 1234 produces 0 because no digit matches the next.
    # 91212129 produces 9 because the only digit that matches the next one is the last digit, 9.

    # code = (1, 1, 2, 2)
    # code = (1, 1, 1, 1)
    # code = (1,2,3,4)
    # code = (9,1,2,1,2,1,2,9)

    sum = 0
    for idx, val in enumerate(code):
        if val == (code[idx + 1] if idx < len(code) - 1 else code[0]):
            sum += int(val)

    return sum

def part2(code):
    #
    # Now, instead of considering the next digit, it wants you to consider the digit halfway around the circular list. That is, if your list contains 10 items, only include a digit in your sum if the digit 10/2 = 5 steps forward matches it. Fortunately, your list has an even number of elements.
    #
    # For example:
    #
    # 1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead.
    # 1221 produces 0, because every comparison is between a 1 and a 2.
    # 123425 produces 4, because both 2s match each other, but no other digit has a match.
    # 123123 produces 12.
    # 12131415 produces 4.

    # code = '1212'
    # code = '1221'
    # code = '123425'
    # code = '123123'
    # code = '12131415'

    def idxPos(idx, len):
        nextIdx = round(len/2) + idx
        return nextIdx if (nextIdx < len) else  nextIdx-len

    sum = 0
    for idx, val in enumerate(code):
        if (val == code[idxPos(idx, len(code))]):
            sum += int(val)

    return sum

def oneLinerPart1(code):
    return sum(int(x) for i, x in enumerate(code) if x == code[int(i+1) % len(code)])

def oneLinerPart2(code):
    return sum(int(x) for i, x in enumerate(code) if x == code[int(i + len(code)/2) % len(code)])

print(
    part1(code),
    oneLinerPart1(code),

    part2(code),
    oneLinerPart2(code)
)

